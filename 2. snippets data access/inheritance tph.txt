public class Product
    {

       
        public int productid { get; set; }
        public string productname { get; set; }
        public int supplierid { get; set; }
        public int categoryid { get; set; }

        public string Kind { get; set; }

        public decimal unitprice { get; set; }

        public bool discontinued { get; set; }

        public Category Category { get; set; }

        public Supplier Supplier { get; set; }
    }



public class Beers :Product
    {
        public Beers()
        => categoryid = 1;

        public Color Color { get; set; }
    }

    public enum Color
    {
        Dark,Yellow,White
    }



public class Soda :Product
    {
        public Soda()
        => categoryid = 1;

        public double SugarQuantity { get; set; }
        public Falvour Flavour { get; set; }

    }

    public enum Falvour
    {
        Citrus,Cola,White
    }




public ProductContext():base("name=ProductModel")
        {
            Database
                .SetInitializer(new DropCreateDatabaseIfModelChanges<ProductContext>());
        }

        public DbSet<Category> Categories { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<Supplier> Suppliers { get; set; }

        protected override void OnModelCreating(DbModelBuilder builder)
        {
            builder.Entity<Category>()
                .HasKey(c => c.categoryid)
                .HasMany(c => c.Products)
                .WithRequired(c => c.Category);
            builder.Entity<Product>()
              .Property(e => e.unitprice)
              .HasPrecision(19, 4);

            builder.Entity<Product>().
              Map<Beers>(m =>
              m.Requires("Kind").HasValue(nameof(Beers)));

            builder.Entity<Product>().
             Map<Soda>(m => 
             m.Requires("Kind")
             .HasValue(nameof(Soda)));

            builder.Entity<Supplier>()
                .HasMany(e => e.Products)
                .WithRequired(e => e.Supplier)
                .WillCascadeOnDelete(false);
        }