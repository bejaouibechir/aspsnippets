//Model

 public class TodoItem
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public bool IsCompleted { get; set; }
    }


//Context

namespace WebMVCore
{
    using System.Data;
    using Microsoft.Extensions.Configuration;
    using Dapper;
    using Microsoft.Data.Sqlite;
    using WebMVCore.Models;

    public class TodoDbContext
    {
        private readonly IDbConnection _dbConnection;

        public TodoDbContext(IConfiguration configuration)
        {
            var connectionString = configuration.GetConnectionString("DefaultConnection");
            _dbConnection = new SqliteConnection(connectionString);
        }

        public IEnumerable<TodoItem> GetAll()
        {
            return _dbConnection.Query<TodoItem>("SELECT * FROM TodoItems");
        }

        public TodoItem GetById(int id)
        {
            return _dbConnection.QueryFirstOrDefault<TodoItem>("SELECT * FROM TodoItems WHERE Id = @Id", new { Id = id });
        }

        public void Add(TodoItem todo)
        {
            _dbConnection.Execute("INSERT INTO TodoItems (Title, IsCompleted) VALUES (@Title, @IsCompleted)", todo);
        }

        public void Update(TodoItem todo)
        {
            _dbConnection.Execute("UPDATE TodoItems SET Title = @Title, IsCompleted = @IsCompleted WHERE Id = @Id", todo);
        }

        public void Delete(int id)
        {
            _dbConnection.Execute("DELETE FROM TodoItems WHERE Id = @Id", new { Id = id });
        }
    }

}


//Usage

using Microsoft.AspNetCore.Mvc;
using DapperTodoApp.Models;
using System.Collections.Generic;

[Route("api/[controller]")]
[ApiController]
public class TodoController : ControllerBase
{
    private readonly TodoDbContext _dbContext;

    public TodoController(TodoDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    [HttpGet]
    public IEnumerable<TodoItem> Get()
    {
        return _dbContext.GetAll();
    }

    [HttpGet("{id}")]
    public IActionResult GetById(int id)
    {
        var todo = _dbContext.GetById(id);
        if (todo == null)
            return NotFound();
        return Ok(todo);
    }

    [HttpPost]
    public IActionResult Post([FromBody] TodoItem todo)
    {
        _dbContext.Add(todo);
        return CreatedAtAction(nameof(GetById), new { id = todo.Id }, todo);
    }

    [HttpPut("{id}")]
    public IActionResult Put(int id, [FromBody] TodoItem todo)
    {
        var existingTodo = _dbContext.GetById(id);
        if (existingTodo == null)
            return NotFound();

        todo.Id = id;
        _dbContext.Update(todo);
        return NoContent();
    }

    [HttpDelete("{id}")]
    public IActionResult Delete(int id)
    {
        var existingTodo = _dbContext.GetById(id);
        if (existingTodo == null)
            return NotFound();

        _dbContext.Delete(id);
        return NoContent();
    }
}

