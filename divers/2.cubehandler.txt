 public class CubeHandler : IHttpHandler
 {
     public RequestContext Context { get; set; }

     public CubeHandler()
     {
         Context = new RequestContext();
     }

     public CubeHandler(RequestContext context)
     {
         Context = context;
     }

     public void ProcessRequest(HttpContext context)
     {
         context.Response.ContentType = "text/html";

         // Ã‰crivez le code HTML et JavaScript pour afficher le cube en 3D
         context.Response.Write(@"
         <!DOCTYPE html>
         <html>
         <head>
             <title>3D Cube</title>
             <script src=""https://cdn.babylonjs.com/babylon.js""></script>
             <style>
                 canvas { width: 100%; height: 100%; }
             </style>
         </head>
         <body>
             <canvas id=""renderCanvas""></canvas>
             <script>
                 var canvas = document.getElementById('renderCanvas');
                 var engine = new BABYLON.Engine(canvas, true);

                 var createScene = function () {
                     var scene = new BABYLON.Scene(engine);

                     var camera = new BABYLON.ArcRotateCamera('camera', 0, Math.PI / 4, 10, BABYLON.Vector3.Zero(), scene);
                     camera.attachControl(canvas, true);

                     var box = BABYLON.MeshBuilder.CreateBox('box', { size: 2 }, scene);
                     var material = new BABYLON.StandardMaterial('material', scene);
                     material.diffuseColor = new BABYLON.Color3(0, 0.5, 1);
                     box.material = material;

                     return scene;
                 };

                 var scene = createScene();
                 engine.runRenderLoop(function () {
                     scene.render();
                 });
             </script>
         </body>
         </html>
     ");
     }

     public bool IsReusable
     {
         get
         {
             return false;
         }
     }
 }
 public class CubeHandlerRoute : IRouteHandler
 {
     public IHttpHandler GetHttpHandler(RequestContext requestContext)
     {
         return  new CubeHandler(requestContext);
     }
 }